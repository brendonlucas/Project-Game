[gd_scene load_steps=12 format=2]

[ext_resource path="res://default_ennv.tres" type="Environment" id=1]
[ext_resource path="res://shaders/Sky_with_scaterring.shader" type="Shader" id=2]
[ext_resource path="res://shaders/noise.png" type="Texture" id=3]
[ext_resource path="res://shaders/Clouds.shader" type="Shader" id=4]
[ext_resource path="res://shaders/Moon_1k.png" type="Texture" id=5]


[sub_resource type="GDScript" id=1]
script/source = "tool
extends Spatial
onready var env = $Env.environment
onready var sun = $Sun_Moon
onready var sky_view = $sky_viewport
onready var clouds_view = $clouds_viewport
onready var sky_tex = $sky_viewport/sky_texture
onready var clouds_tex = $clouds_viewport/clouds_texture

export (int) var clouds_resolution: int=1024 setget set_clouds_resolution
export (int) var sky_resolution: int=2048 setget set_sky_resolution
export (Color, RGBA) var color_sky :Color = Color(0.25,0.5,1.0,1.0)setget set_color_sky
export (float, 0.0,10.0,0.0001) var sky_tone: float = 3.0 setget set_sky_tone #from 0 to 10
export (float, 0.0,2.0,0.0001) var sky_density: float = 0.75 setget set_sky_density #from 0 to 2
export (float, 0.0,10.0,0.0001) var sky_rayleig_coeff: float = 0.75 setget set_sky_rayleig_coeff #from 0 to 10
export (float, 0.0,10.0,0.0001) var sky_mie_coeff: float = 2.0 setget set_sky_mie_coeff #from 0 to 10
export (float, 0.0,2.0,0.0001) var multiScatterPhase: float = 0.0 setget set_multiScatterPhase #from 0 to 2
export (float, -2.0,2.0,0.0001) var anisotropicIntensity: float = 0.0 setget set_anisotropicIntensity #from 0 to 2
var sun_pos: Vector3
var moon_pos: Vector3
var god_rays
var iTime: float=0.0

export (Color, RGBA) var moon_light :Color = Color(0.6,0.6,0.8,1.0)
export (Color, RGBA) var sunset_light :Color = Color(1.0,0.7,0.55,1.0)
export (Color, RGBA) var day_light :Color = Color(1.0,1.0,1.0,1.0)
export (Color, RGBA) var moon_tint :Color = Color(1.0,0.7,0.35,1.0) setget set_moon_tint
export (Color, RGBA) var clouds_tint :Color = Color(1.0,1.0,1.0,1.0) setget set_clouds_tint
export (float, -0.3,0.3,0.000001) var sunset_offset: float=-0.1
export (float, 0.0,0.3,0.000001) var sunset_range: float=0.2
export (float, 0.0,1.0,0.0001) var sun_radius: float = 0.04 setget set_sun_radius#from 0 to 1
export (float, 0.0,0.5,0.0001) var moon_radius: float = 0.1 setget set_moon_radius#from 0 to 0.5
export (float, -1.0,1.0,0.0001) var moon_phase: float =0.0 setget set_moon_phase#from 0 to 1
export var night_level_light: float=0.05 setget set_night_level_light
var lighting_pos: Vector3=Vector3(0.0,1.0,1.0)
var lighting_strike: bool = false setget set_lighting_strike
export var wind_dir: Vector2=Vector2(1.0,0.0) setget set_wind_dir
export (float, 0.0,1.0,0.0001) var wind_strength: float = 0.1 setget set_wind_strength#from 0 to 1
export (float, 0.0,1.0,0.0001) var clouds_coverage: float = 0.5 setget set_clouds_coverage#from 0 to 1
export (float, 0.0,10.0,0.0001) var clouds_size: float = 2.0 setget set_clouds_size#from 0 to 10
export (float, 0.0,10.0,0.0001) var clouds_softness: float = 1.0 setget set_clouds_softness#from 0 to 1
export (float, 0.0,1.0,0.0001) var clouds_height: float = 0.35 setget set_clouds_height#from 0 to 1
export (float, 0.0,1.0,0.0001) var quality: float = 0.25 setget set_quality#from 0 to 1
export (int, 0, 23) var hours: int=0 setget set_hours
export (int, 0, 59) var minutes: int=0 setget set_minutes
export (int, 0, 59) var seconds: int=0 setget set_seconds
export (float, 0.0,1.0,0.000001) var time_of_day_setup: float=0.0 setget set_time_of_day#from 0 to 1 for setup time_of_day, Because of the offset, it is difficult to manage this variable in the editor directly
var time_of_day: float=0.0
var one_second: float = 1.0/(24.0*60.0*60.0)#What part of a second takes in a day in the range from 0 to 1

func set_call_deff_shader_params(node, params, value):
	node.set(params,value)

func set_clouds_resolution(value):
	clouds_resolution = value
	if clouds_view and clouds_tex:
		clouds_view.size = Vector2(clouds_resolution,clouds_resolution)
		clouds_tex.texture.set_size_override(Vector2(clouds_resolution,clouds_resolution))

func set_sky_resolution(value):
	sky_resolution = value
	if sky_view and sky_tex:
		sky_view.size = Vector2(sky_resolution,sky_resolution)
		sky_tex.texture.set_size_override(Vector2(sky_resolution,sky_resolution))
	
func _ready():
	god_rays = get_node_or_null(\"GodRays\")
	call_deferred(\"set_god_rays\",false)
	call_deferred(\"_set_attenuation\",3.0)
	call_deferred(\"_set_exposure\",1.0)
	call_deferred(\"_set_light_size\",0.3)
	env.background_sky.set_panorama(sky_view.get_texture())
	call_deferred(\"set_color_sky\",color_sky)
	call_deferred(\"set_moon_tint\",moon_tint)
	call_deferred(\"set_clouds_tint\",clouds_tint)
	call_deferred(\"set_moon_phase\",moon_phase)
	call_deferred(\"set_moon_radius\",moon_radius)
	call_deferred(\"set_wind_strength\",wind_strength)
	call_deferred(\"set_wind_strength\",wind_strength)
	call_deferred(\"set_quality\",quality)
	call_deferred(\"set_clouds_height\",clouds_height)
	call_deferred(\"set_clouds_coverage\",clouds_coverage)

func set_night_level_light(value):
	night_level_light = clamp(value,0.0,1.0)
	set_time()

func set_hours(value):
	hours = clamp(value,0,23)
	set_time_of_day((hours*3600+minutes*60+seconds)*one_second)
		
func set_minutes(value):
	minutes = clamp(value,0,59)
	set_time_of_day((hours*3600+minutes*60+seconds)*one_second)
	
func set_seconds(value):
	seconds = clamp(value,0,59)
	set_time_of_day((hours*3600+minutes*60+seconds)*one_second)
		
func set_time_of_day(value):
	time_of_day_setup = value
	var time = value/one_second
	value -= 2.0/24.0
	if value < 0.0:
		value = 1.0 + value
	time_of_day = value
	hours = int(clamp(time/3600.0,0.0,23.0))
	time -= hours*3600
	minutes = int(clamp(time/60,0.0,59.0))
	time -= minutes*60
	seconds = int(clamp(time,0.0,59.0))
	#print (hours,\":\",minutes,\":\",seconds)
	set_time()

func set_time():
	if !sun or !env or !sky_tex or !clouds_tex:
		return
	var light_color :Color = Color(1.0,1.0,1.0,1.0)
	var phi = time_of_day*2.0*PI
	sun_pos = Vector3(0.0,-1.0,0.0).normalized().rotated(Vector3(0.0,0.0,1.0).normalized(),phi) #here you can change the start position of the Sun and axis of rotation
	moon_pos = Vector3(0.0,1.0,0.0).normalized().rotated(Vector3(0.0,0.0,1.0).normalized(),phi) #Same for Moon
	var moon_tex_pos = Vector3(0.0,1.0,0.0).normalized().rotated(Vector3(0.0,0.0,1.0).normalized(),(phi+PI)*0.5) #Same for Moon
	
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/MOON_TEX_POS\",moon_tex_pos)
	var light_energy = smoothstep(sunset_offset,0.4,sun_pos.y);# light intensity depending on the height of the sun
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/SUN_POS\",sun_pos)
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/MOON_POS\",moon_pos)
	call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/SUN_POS\",-sun_pos)
	call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/attenuation\",clamp(light_energy,night_level_light*0.25,1.00))#clouds to bright with night_level_light
	light_energy = clamp(light_energy,night_level_light,1.00);
	
	var sun_height =sun_pos.y-sunset_offset
	if sun_height < sunset_range:
		light_color=lerp(moon_light, sunset_light, clamp(sun_height/sunset_range,0.0,1.0))
	else:
		light_color=lerp(sunset_light, day_light, clamp((sun_height-sunset_range)/sunset_range,0.0,1.0))
	if sun_pos.y < 0.0:
		if moon_pos.normalized() != Vector3.UP:# error  Up vector and direction between node origin and target are aligned, look_at() failed.
			sun.look_at_from_position(moon_pos,Vector3.ZERO,Vector3.UP); # move sun to position and look at center scene from position
	else:
		if sun_pos.normalized() != Vector3.UP:
			sun.look_at_from_position(sun_pos,Vector3.ZERO,Vector3.UP); # move sun to position and look at center scene from position
	set_clouds_tint(light_color) # comment this, if you need custom clouds tint
	light_energy = light_energy *(1-clouds_coverage*0.5)
	sun.light_energy = light_energy
	sun.light_color = light_color
	env.ambient_light_energy = light_energy
	env.ambient_light_color = light_color
	env.adjustment_saturation = 1-clouds_coverage*0.5

func _lighting_on():
	set_lighting_strike(true)

func _lighting_off():
	set_lighting_strike(false)
	
func set_lighting_strike(on):
	if on:
		lighting_strike = true
	else:
		lighting_strike = false
		if sky_tex:
			call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/LIGHTING_STRENGTH\",Vector3(0.0,0.0,0.0))
		set_time()

func set_clouds_height(value):
	clouds_height = clamp(value,0.0,1.0)
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/HEIGHT\",clouds_height)

func set_clouds_coverage(value):
	clouds_coverage = clamp(value,0.0,1.0)
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/COVERAGE\",1.0-clouds_coverage)
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/ABSORPTION\",clouds_coverage+0.75)
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/THICKNESS\",clouds_coverage*10+10)
		call_deferred(\"set_time\")

func set_clouds_size(value):
	clouds_size = clamp(value,0.0,10.0)
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/SIZE\",clouds_size)

func set_clouds_softness(value):
	clouds_softness = clamp(value,0.0,10.0)
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/SOFTNESS\",clouds_softness)

func set_quality(value):
	quality = value
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/STEPS\",clamp (int(quality*100),2,100))

func set_wind_dir(value):
	wind_dir = value.normalized() #normalize wind vector
	set_wind_strength(wind_strength)

func set_wind_strength(value):
	wind_strength = value
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", clouds_tex.material, \"shader_param/WIND\",Vector3(wind_dir.x,0.0,wind_dir.y)*wind_strength)
	
func set_sun_radius(value):
	sun_radius = clamp(value,0.0,1.0)
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sun_radius\",value)

func set_moon_radius(value):
	moon_radius = clamp(value,0.0,1.0)
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/moon_radius\",value)
	
func set_moon_phase(value):
	moon_phase = clamp(value,-1.0,1.0)
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/MOON_PHASE\",moon_phase)#*0.4-0.2) # convert to diapazon -0.2...+0.2

func set_sky_tone(value):
	sky_tone = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sky_tone\",sky_tone)

func set_sky_density(value):
	sky_density = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sky_density\",sky_density)

func set_sky_rayleig_coeff(value):
	sky_rayleig_coeff = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sky_rayleig_coeff\",sky_rayleig_coeff)
		
func set_sky_mie_coeff(value):
	sky_mie_coeff = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/sky_mie_coeff\",sky_mie_coeff)

func set_multiScatterPhase(value):
	multiScatterPhase = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/multiScatterPhase\",multiScatterPhase)

func set_anisotropicIntensity(value):
	anisotropicIntensity = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/anisotropicIntensity\",anisotropicIntensity)

func set_color_sky(value):
	color_sky = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/color_sky\",color_sky)

func set_moon_tint(value):
	moon_tint = value
	if sky_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/moon_tint\",moon_tint)

func set_clouds_tint(value):
	clouds_tint = value
	if clouds_tex:
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/clouds_tint\",clouds_tint)

func _process(delta):
	if (lighting_strike):
		iTime += delta
		var lighting_stength = clamp(sin(iTime*31.4),0.1,1.0)
		lighting_pos = lighting_pos.normalized()
		sun.light_color = day_light
		sun.light_energy = lighting_stength*2
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/LIGHTTING_POS\",lighting_pos)
		call_deferred(\"set_call_deff_shader_params\", sky_tex.material, \"shader_param/LIGHTING_STRENGTH\",Vector3(lighting_stength,lighting_stength,lighting_stength))
		lighting_pos.x *= -1
		sun.look_at_from_position(lighting_pos,Vector3.ZERO,Vector3.UP);
	else:
		iTime = 0.0

func _set_exposure(value):
	if god_rays:
		god_rays.set_exposure(value)

func _set_attenuation(value):
	if god_rays:
		god_rays.set_attenuation(value)
	
func _set_light_size(value):
	if god_rays:
		god_rays.set_light_size(value)

func set_god_rays(button_pressed):
	if not god_rays:
		return
	if button_pressed:
		add_child(god_rays)
		god_rays.light = get_node(\"Sun_Moon\")
		god_rays.set_clouds(get_node(\"cloud_viewport\").get_texture())
	else:
		remove_child(god_rays)
"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 4 )
shader_param/WIND = Vector3( 0.1, 0, 0 )
shader_param/SUN_POS = Vector3( -0.999048, 0.0436187, 0 )
shader_param/SIZE = 2.0
shader_param/SOFTNESS = 1.0
shader_param/COVERAGE = 0.5
shader_param/HEIGHT = 0.35
shader_param/THICKNESS = 15.0
shader_param/ABSORPTION = 1.25
shader_param/STEPS = 100
shader_param/Noise = ExtResource( 3 )

[sub_resource type="ImageTexture" id=3]
flags = 4
lossy_quality = 1.0
flags = 4
size = Vector2( 1024, 1024 )

[sub_resource type="ViewportTexture" id=4]
viewport_path = NodePath("clouds_viewport")

[sub_resource type="ShaderMaterial" id=5]
resource_local_to_scene = true
shader = ExtResource( 2 )
shader_param/SUN_POS = Vector3( 0.999048, -0.0436187, 0 )
shader_param/MOON_POS = Vector3( -0.999048, 0.0436187, 0 )
shader_param/MOON_TEX_POS = Vector3( -0.722364, -0.691513, 0 )
shader_param/MOON_PHASE = -1.0
shader_param/moon_radius = 0.35
shader_param/sun_radius = 0.04
shader_param/attenuation = 0.0352785
shader_param/LIGHTING_STRENGTH = Vector3( 0.1, 0.1, 0.1 )
shader_param/LIGHTTING_POS = Vector3( 0, 0.707107, 0.707107 )
shader_param/sky_tone = 3.0
shader_param/sky_density = 0.75
shader_param/sky_rayleig_coeff = 0.75
shader_param/sky_mie_coeff = 2.0
shader_param/multiScatterPhase = 0.1
shader_param/anisotropicIntensity = 0.0
shader_param/color_sky = Color( 0.25098, 0.501961, 1, 1 )
shader_param/moon_tint = Color( 1, 0.7, 0.35, 1 )
shader_param/clouds_tint = Color( 0.712763, 0.628191, 0.729523, 1 )
shader_param/MOON = ExtResource( 5 )
shader_param/cloud_env_texture = SubResource( 4 )

[sub_resource type="ImageTexture" id=6]
flags = 0
lossy_quality = 1.0
flags = 0
size = Vector2( 2048, 2048 )

[node name="Sky_with_scaterring" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.837814, 0, 0 )
script = SubResource( 1 )
color_sky = Color( 0.25098, 0.501961, 1, 1 )
clouds_tint = Color( 0.712763, 0.628191, 0.729523, 1 )
sun_radius = 0.04
moon_radius = 0.35
moon_phase = -1.0
night_level_light = 0.1
clouds_height = 0.35
quality = 1.0
hours = 7
minutes = 50
time_of_day_setup = 0.326389

[node name="Env" type="WorldEnvironment" parent="."]
environment = ExtResource( 1 )

[node name="Sun_Moon" type="DirectionalLight" parent="."]
transform = Transform( -4.37114e-08, 0.0436187, -0.999043, 0, 0.999048, 0.0436185, 1, 1.90664e-09, -4.36696e-08, -0.161234, 0.0436187, 0 )
light_color = Color( 0.712763, 0.628191, 0.729523, 1 )
light_energy = 0.075
shadow_enabled = true
shadow_color = Color( 0.3, 0.3, 0.3, 1 )
directional_shadow_depth_range = 1

[node name="clouds_viewport" type="Viewport" parent="."]
size = Vector2( 1024, 1024 )
transparent_bg = true
render_target_update_mode = 3

[node name="clouds_texture" type="Sprite" parent="clouds_viewport"]
material = SubResource( 2 )
texture = SubResource( 3 )
centered = false

[node name="sky_viewport" type="Viewport" parent="."]
size = Vector2( 2048, 2048 )
render_target_update_mode = 3

[node name="sky_texture" type="Sprite" parent="sky_viewport"]
material = SubResource( 5 )
texture = SubResource( 6 )
centered = false
